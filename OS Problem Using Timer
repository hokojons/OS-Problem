#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <time.h>
#include <stdlib.h>

#define NUM_PHILOSOPHERS 5
#define MAX_EATING_TIME 3
#define MIN_THINKING_TIME 2

sem_t eating_slots;
pthread_mutex_t chopsticks[NUM_PHILOSOPHERS];
pthread_mutex_t turn_mutex;
int current_turn = 0;
int eating_count = 0;

void *philosopher(void *arg) {
    int id = *(int *)arg;
    int left = id;
    int right = (id + 1) % NUM_PHILOSOPHERS;
    int meals_eaten = 0;
    
    srand(time(NULL) + id);
    
    while (meals_eaten < 3) {
        int think_time = MIN_THINKING_TIME + (rand() % 3);
        printf("Philosopher %d is thinking for %d seconds...\n", id, think_time);
        sleep(think_time);
        
        pthread_mutex_lock(&turn_mutex);
        if (current_turn != id) {
            pthread_mutex_unlock(&turn_mutex);
            continue;
        }
        pthread_mutex_unlock(&turn_mutex);
        
        printf("Philosopher %d is waiting for eating slot...\n", id);
        sem_wait(&eating_slots);
        
        printf("Philosopher %d is picking up chopsticks...\n", id);
        
        int first_chopstick = (left < right) ? left : right;
        int second_chopstick = (left < right) ? right : left;
        
        pthread_mutex_lock(&chopsticks[first_chopstick]);
        pthread_mutex_lock(&chopsticks[second_chopstick]);
        
        int eat_time = 1 + (rand() % MAX_EATING_TIME);
        printf("Philosopher %d is eating (meal #%d) for %d seconds...\n", 
               id, meals_eaten + 1, eat_time);
        sleep(eat_time);
        meals_eaten++;
        
        pthread_mutex_unlock(&chopsticks[second_chopstick]);
        pthread_mutex_unlock(&chopsticks[first_chopstick]);
        printf("Philosopher %d finished eating meal #%d\n", id, meals_eaten);
        
        pthread_mutex_lock(&turn_mutex);
        current_turn = (current_turn + 1) % NUM_PHILOSOPHERS;
        eating_count++;
        pthread_mutex_unlock(&turn_mutex);
        
        sem_post(&eating_slots);
        
        usleep(100000);
    }
    
    printf("Philosopher %d has finished all meals and is leaving!\n", id);
    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];
    
    sem_init(&eating_slots, 0, 2);
    
    pthread_mutex_init(&turn_mutex, NULL);
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&chopsticks[i], NULL);
    }
    
    printf("Starting Dining Philosophers Problem - Round Robin Solution\n");
    printf("Rules: Max 2 concurrent eaters, Round-robin turns, 3 meals per philosopher\n\n");
    
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }
    
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }
    
    printf("\nAll philosophers have finished dining!\n");
    printf("Total meals served: %d\n", eating_count);
    
    sem_destroy(&eating_slots);
    pthread_mutex_destroy(&turn_mutex);
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&chopsticks[i]);
    }
    
    return 0;
}
